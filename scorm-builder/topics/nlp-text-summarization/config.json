{
    "title": "NLP & Text Summarization with AI",
    "description": "Master natural language processing fundamentals by building a real-world text summarization app using Google Gemini API and modern development tools",
    
    "learning_objectives": [
      "Understand core NLP concepts and text processing techniques",
      "Integrate Google Gemini API for text summarization tasks",
      "Build full-stack web applications using AI-assisted coding",
      "Deploy functional AI-powered summarization tools",
      "Apply prompt engineering for optimal summarization results"
    ],
    
    "content": {
      "company_logo": {
        "src": "nebula-logo.png",
        "alt": "Nebula KnowLab Logo"
      },
      
      "task_statement": "Build a Text Summarization Web App",
      
      "task_steps": [
        {
          "title": "Set up Google Gemini API Access",
          "description": "Get your free API key from Google AI Studio",
          "instructions": "Navigate to Google AI Studio (https://aistudio.google.com/) and create a new API key. This will give you access to the Gemini API for free with generous usage limits.",
          "image": {
            "src": "step-1-api-key.jpg",
            "alt": "Google AI Studio API key generation",
            "caption": "Step 1: Generate your free Gemini API key"
          },
          "code": "// Store your API key securely\nconst GEMINI_API_KEY = 'your-api-key-here';\n\n// Test API connection\nconst testConnection = async () => {\n  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      contents: [{ parts: [{ text: 'Hello, Gemini!' }] }]\n    })\n  });\n  return response.ok;\n};",
          "hint": {
            "text": "Make sure to keep your API key secure and never commit it to version control. Use environment variables in production.",
            "image": {
              "src": "api-key-security.jpg",
              "alt": "API key security best practices",
              "caption": "Keep your API keys secure and never expose them in client-side code"
            },
            "code": "// Environment variable example\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\n// For client-side, use a proxy server\n// Never expose API keys in frontend code!"
          }
        },
        {
          "title": "Set up Cursor IDE Project",
          "description": "Create a new project structure for your summarization app",
          "instructions": "Open Cursor IDE and create a new project folder. Set up the basic HTML, CSS, and JavaScript files for your text summarization application.",
          "image": {
            "src": "step-2-cursor-setup.jpg",
            "alt": "Cursor IDE project setup",
            "caption": "Step 2: Initialize your project in Cursor"
          },
          "code": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Text Summarizer</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>AI Text Summarizer</h1>\n        <textarea id=\"inputText\" placeholder=\"Enter your text here...\"></textarea>\n        <button id=\"summarizeBtn\">Summarize</button>\n        <div id=\"result\"></div>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>",
          "hint": {
            "text": "Use Cursor's AI features to help you generate boilerplate code and get suggestions as you build your application.",
            "code": "// Use Cursor's AI features:\n// 1. Ctrl+K to generate code\n// 2. Ctrl+L to chat with AI\n// 3. Ask for specific implementations\n\n// Example: Ask Cursor to create a responsive layout\n// \"Create a responsive container with flexbox layout\""
          }
        },
        {
          "title": "Design Frontend Interface",
          "description": "Create an intuitive user interface for text input and summary output",
          "instructions": "Design a clean, modern interface with a text area for input, controls for summary length, and a display area for the generated summary. Make it responsive and user-friendly.",
          "image": {
            "src": "step-3-frontend-design.jpg",
            "alt": "Frontend interface mockup",
            "caption": "Step 3: Create an intuitive user interface"
          },
          "code": "/* styles.css */\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#inputText {\n    width: 100%;\n    height: 200px;\n    padding: 15px;\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    font-size: 16px;\n    resize: vertical;\n}\n\n#summarizeBtn {\n    background: #4A9B8E;\n    color: white;\n    padding: 12px 24px;\n    border: none;\n    border-radius: 6px;\n    font-size: 16px;\n    cursor: pointer;\n    margin: 10px 0;\n}\n\n#result {\n    margin-top: 20px;\n    padding: 15px;\n    background: #f8f9fa;\n    border-radius: 8px;\n    min-height: 100px;\n}",
          "hint": {
            "text": "Focus on creating a clean, accessible design. Consider adding loading states and error handling for better user experience.",
            "image": {
              "src": "ui-design-principles.jpg",
              "alt": "UI design principles and best practices",
              "caption": "Follow modern UI/UX principles for better user experience"
            }
          }
        },
        {
          "title": "Implement Backend API Integration",
          "description": "Connect your frontend to the Gemini API for text summarization",
          "instructions": "Create the JavaScript code to send text to the Gemini API and receive the summarized response. Handle API calls, responses, and errors properly.",
          "image": {
            "src": "step-4-backend-api.jpg",
            "alt": "Backend API implementation",
            "caption": "Step 4: Integrate with Gemini API"
          },
          "code": "// script.js\nconst GEMINI_API_KEY = 'your-api-key-here';\nconst API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`;\n\nasync function summarizeText(text, length = 'medium') {\n    const lengthPrompts = {\n        short: 'Summarize in 1-2 sentences',\n        medium: 'Summarize in 2-3 sentences',\n        long: 'Summarize in 3-4 sentences'\n    };\n    \n    const prompt = `${lengthPrompts[length]}: ${text}`;\n    \n    try {\n        const response = await fetch(API_URL, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                contents: [{ parts: [{ text: prompt }] }]\n            })\n        });\n        \n        if (!response.ok) throw new Error('API request failed');\n        \n        const data = await response.json();\n        return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n        console.error('Error:', error);\n        return 'Error generating summary. Please try again.';\n    }\n}\n\n// Event listeners\ndocument.getElementById('summarizeBtn').addEventListener('click', async () => {\n    const inputText = document.getElementById('inputText').value;\n    const resultDiv = document.getElementById('result');\n    \n    if (!inputText.trim()) {\n        resultDiv.textContent = 'Please enter some text to summarize.';\n        return;\n    }\n    \n    resultDiv.textContent = 'Generating summary...';\n    const summary = await summarizeText(inputText);\n    resultDiv.textContent = summary;\n});",
          "hint": {
            "text": "Test your API integration with different types of text. Consider adding retry logic and better error messages for production use.",
            "code": "// Error handling example\nasync function summarizeWithRetry(text, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await summarizeText(text);\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n    }\n  }\n}"
          }
        },
        {
          "title": "Add Summary Length Controls",
          "description": "Implement controls to customize the length of generated summaries",
          "instructions": "Add radio buttons or a dropdown to let users choose between short, medium, and long summaries. Update your API calls to use the selected length preference.",
          "image": {
            "src": "step-5-testing.jpg",
            "alt": "Testing different text inputs",
            "caption": "Step 5: Add length controls and test your app"
          },
          "code": "<!-- Add to HTML -->\n<div class=\"controls\">\n    <label>Summary Length:</label>\n    <input type=\"radio\" id=\"short\" name=\"length\" value=\"short\" checked>\n    <label for=\"short\">Short</label>\n    <input type=\"radio\" id=\"medium\" name=\"length\" value=\"medium\">\n    <label for=\"medium\">Medium</label>\n    <input type=\"radio\" id=\"long\" name=\"length\" value=\"long\">\n    <label for=\"long\">Long</label>\n</div>\n\n// Update JavaScript\ndocument.getElementById('summarizeBtn').addEventListener('click', async () => {\n    const inputText = document.getElementById('inputText').value;\n    const selectedLength = document.querySelector('input[name=\"length\"]:checked').value;\n    const resultDiv = document.getElementById('result');\n    \n    if (!inputText.trim()) {\n        resultDiv.textContent = 'Please enter some text to summarize.';\n        return;\n    }\n    \n    resultDiv.textContent = 'Generating summary...';\n    const summary = await summarizeText(inputText, selectedLength);\n    resultDiv.textContent = summary;\n});",
          "hint": {
            "text": "Test your app with various text types (articles, emails, documents) to ensure the summarization works well across different content types.",
            "image": {
              "src": "testing-examples.jpg",
              "alt": "Different text types for testing",
              "caption": "Test with various content types to ensure robust summarization"
            },
            "code": "// Test with different text types\nconst testTexts = {\n  article: 'Long article text...',\n  email: 'Email content...',\n  document: 'Document text...'\n};\n\n// Test each type\nObject.entries(testTexts).forEach(([type, text]) => {\n  console.log(`Testing ${type}:`, await summarizeText(text));\n});"
          }
        }
      ],
      
      "hero_image": {
        "src": "nlp-hero.jpg",
        "alt": "AI-powered text summarization in action", 
        "caption": "Transform long documents into concise, meaningful summaries using Google's Gemini AI"
      },
      
      "concepts": [
        {
          "title": "Natural Language Processing",
          "summary": "AI techniques for understanding and processing human language",
          "image": {
            "src": "nlp-concept.jpg",
            "alt": "NLP processing pipeline illustration"
          },
          "learn_more_context": "nlp_fundamentals"
        },
        {
          "title": "API Integration",
          "summary": "Connecting external AI services to your applications", 
          "image": {
            "src": "api-integration.jpg",
            "alt": "API connection diagram"
          },
          "learn_more_context": "api_integration"
        },
        {
          "title": "Prompt Engineering",
          "summary": "Crafting effective instructions for AI models",
          "image": {
            "src": "prompt-engineering.jpg",
            "alt": "Prompt optimization examples"
          },
          "learn_more_context": "prompt_engineering"
        }
      ],
      
      
      "task_images": [
        {
          "src": "gemini-api-studio.jpg",
          "alt": "Google AI Studio interface",
          "caption": "Google AI Studio - Your gateway to Gemini API access"
        },
        {
          "src": "cursor-vibe-coding.jpg", 
          "alt": "Cursor IDE in action",
          "caption": "Cursor IDE enabling 'vibe coding' with AI assistance"
        },
        {
          "src": "summarization-demo.jpg",
          "alt": "Working summarization app",
          "caption": "Final app: Transform long text into concise, meaningful summaries"
        }
      ]
    },
    
    "quiz": {
      "question": "What is the primary advantage of using Google's Gemini API for text summarization compared to traditional rule-based approaches?",
      "options": [
        "It's completely free with unlimited usage",
        "It can understand context and meaning for more accurate summaries", 
        "It works only with English text",
        "It requires no API key setup"
      ],
      "correct_answer": 1,
      "explanation_image": {
        "src": "nlp-vs-traditional.jpg",
        "alt": "Comparison of AI vs traditional text processing"
      }
    },
    
    "chat_contexts": {
      "task_help": "Guide the learner through building the text summarization app step-by-step, from API setup to deployment",
      "nlp_fundamentals": "Explain core NLP concepts, tokenization, and how AI models process human language",
      "api_integration": "Detail how to securely integrate external APIs, handle authentication, and manage responses",
      "prompt_engineering": "Teach effective prompt design for summarization tasks and optimization techniques", 
      "quiz_failed": "Provide detailed explanation of AI-based vs traditional text processing approaches with examples",
      "hints_exhausted": "Offer advanced troubleshooting for API integration, Cursor IDE usage, and deployment issues"
    }
  }  