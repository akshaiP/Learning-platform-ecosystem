{
    "title": "NLP & Text Summarization with AI",
    "description": "Master natural language processing fundamentals by building a real-world text summarization app using Google Gemini API and modern development tools",
    
    "learning_objectives": [
      "Understand core NLP concepts and text processing techniques",
      "Integrate Google Gemini API for text summarization tasks",
      "Build full-stack web applications using AI-assisted coding",
      "Deploy functional AI-powered summarization tools",
      "Apply prompt engineering for optimal summarization results"
    ],
    
    "content": {
      "company_logo": {
        "src": "nebula-logo.png",
        "alt": "Nebula KnowLab Logo"
      },
      
      "task_statement": "Build a Text Summarization Web App",
      
      "task_steps": [
        {
          "title": "Set up Google Gemini API Access",
          "description": "Get your free API key from Google AI Studio",
          "instructions": "Navigate to Google AI Studio (https://aistudio.google.com/) and create a new API key. This will give you access to the Gemini API for free with generous usage limits.",
          "images": [
            {
              "src": "gemini-api-studio.jpg",
              "alt": "Google AI Studio API key generation",
              "caption": "Step 1: Generate your free Gemini API key"
            },
            {
              "src": "step-2-cursor-setup.jpg",
              "alt": "Google AI Studio interface",
              "caption": "Find API keys under 'Get API key' in AI Studio"
            }
          ],
          "code": {
            "content": "// Store your API key securely\nconst GEMINI_API_KEY = 'your-api-key-here';\n\n// Test API connection\nconst testConnection = async () => {\n  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      contents: [{ parts: [{ text: 'Hello, Gemini!' }] }]\n    })\n  });\n  return response.ok;\n};",
            "language": "javascript"
          },
          "hint": {
            "text": "Make sure to keep your API key secure and never commit it to version control. Use environment variables in production.",
            "images": [
              {
                "src": "gemini-api-studio.jpg",
                "alt": "API key security best practices",
                "caption": "Keep your API keys secure and never expose them in client-side code"
              },
              {
                "src": "gemini-api-studio.jpg",
                "alt": "Google AI Studio API key location",
                "caption": "Copy the key and store it server-side"
              }
            ],
            "code": {
              "content": "// Environment variable example\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\n// For client-side, use a proxy server\n// Never expose API keys in frontend code!",
              "language": "javascript"
            }
          }
        },
        {
          "title": "Set up Cursor IDE Project",
          "description": "Create a new project structure for your summarization app",
          "instructions": "Open Cursor IDE and create a new project folder. Set up the basic HTML, CSS, and JavaScript files for your text summarization application.",
          "images": [
            {
              "src": "cursor-vibe-coding.jpg",
              "alt": "Cursor IDE project setup",
              "caption": "Step 2: Initialize your project in Cursor"
            },
            {
              "src": "cursor-vibe-coding.jpg",
              "alt": "Cursor IDE 'vibe coding' with AI",
              "caption": "Use AI assists to scaffold quickly"
            }
          ],
          "code": {
            "content": "import requests\n\ndef summarize_text(text, api_key):\n    \"\"\"Simple text summarization using an API\"\"\"\n    url = \"https://api.example.com/summarize\"\n    payload = {'text': text, 'key': api_key}\n    response = requests.post(url, json=payload)\n    if response.status_code == 200:\n        return response.json()['summary']\n    else:\n        return \"Error summarizing text\"\n\n# Example usage\napi_key = 'your-api-key'\ntext = \"Long text to summarize...\"\nprint(summarize_text(text, api_key))",
            "language": "python"
          },
          "hint": {
            "text": "Use Cursor's AI features to help you generate boilerplate code and get suggestions as you build your application.",
            "code": {
              "content": "// Use Cursor's AI features:\n// 1. Ctrl+K to generate code\n// 2. Ctrl+L to chat with AI\n// 3. Ask for specific implementations\n\n// Example: Ask Cursor to create a responsive layout\n// \"Create a responsive container with flexbox layout\"",
              "language": "javascript"
            }
          }
        },
        {
          "title": "Design Frontend Interface",
          "description": "Create an intuitive user interface for text input and summary output",
          "instructions": "Design a clean, modern interface with a text area for input, controls for summary length, and a display area for the generated summary. Make it responsive and user-friendly.",
          "image": {
            "src": "step-3-frontend-design.jpg",
            "alt": "Frontend interface mockup",
            "caption": "Step 3: Create an intuitive user interface"
          },
          "code": {
            "content": "/* styles.css */\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#inputText {\n    width: 100%;\n    height: 200px;\n    padding: 15px;\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    font-size: 16px;\n    resize: vertical;\n}\n\n#summarizeBtn {\n    background: #4A9B8E;\n    color: white;\n    padding: 12px 24px;\n    border: none;\n    border-radius: 6px;\n    font-size: 16px;\n    cursor: pointer;\n    margin: 10px 0;\n}\n\n#result {\n    margin-top: 20px;\n    padding: 15px;\n    background: #f8f9fa;\n    border-radius: 8px;\n    min-height: 100px;\n}",
            "language": "css"
          },
          "hint": {
            "text": "Focus on creating a clean, accessible design. Consider adding loading states and error handling for better user experience.",
            "image": {
              "src": "ui-design-principles.jpg",
              "alt": "UI design principles and best practices",
              "caption": "Follow modern UI/UX principles for better user experience"
            }
          }
        },
        {
          "title": "Implement Backend API Integration",
          "description": "Connect your frontend to the Gemini API for text summarization",
          "instructions": "Create the JavaScript code to send text to the Gemini API and receive the summarized response. Handle API calls, responses, and errors properly.",
          "image": {
            "src": "step-4-backend-api.jpg",
            "alt": "Backend API implementation",
            "caption": "Step 4: Integrate with Gemini API"
          },
          "code": {
            "content": "from flask import Flask, render_template_string, request\n\napp = Flask(__name__)\n\n# Simple HTML template embedded inside Python\nHTML_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Summarization App</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 40px; background: #f4f7f9; }\n        .container { max-width: 800px; margin: auto; padding: 20px; background: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\n        textarea { width: 100%; height: 200px; padding: 10px; border-radius: 6px; border: 1px solid #ccc; }\n        button { background: #4A9B8E; color: white; padding: 12px 24px; border: none; border-radius: 6px; cursor: pointer; margin-top: 10px; }\n        #result { margin-top: 20px; padding: 15px; background: #eef2f3; border-radius: 8px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>AI Text Summarizer</h2>\n        <form method=\"post\">\n            <label for=\"inputText\">Enter text to summarize:</label><br>\n            <textarea name=\"inputText\" required></textarea><br>\n            <button type=\"submit\">Summarize</button>\n        </form>\n        {% if summary %}\n        <div id=\"result\">\n            <h3>Summary:</h3>\n            <p>{{ summary }}</p>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n\"\"\"\n\n# Dummy summarization logic\ndef simple_summarizer(text):\n    sentences = text.split('.')\n    if len(sentences) > 2:\n        return sentences[0] + '.' + sentences[-2] + '.'\n    return text\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    summary = None\n    if request.method == 'POST':\n        text = request.form.get('inputText')\n        summary = simple_summarizer(text)\n    return render_template_string(HTML_TEMPLATE, summary=summary)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n",
            "language": "python"
          },
          "hint": {
            "text": "Test your API integration with different types of text. Consider adding retry logic and better error messages for production use.",
            "code": {
              "content": "// Error handling example\nasync function summarizeWithRetry(text, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await summarizeText(text);\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n    }\n  }\n}",
              "language": "javascript"
            }
          }
        },
        {
          "title": "Add Summary Length Controls",
          "description": "Implement controls to customize the length of generated summaries",
          "instructions": "Add radio buttons or a dropdown to let users choose between short, medium, and long summaries. Update your API calls to use the selected length preference.",
          "image": {
            "src": "step-5-testing.jpg",
            "alt": "Testing different text inputs",
            "caption": "Step 5: Add length controls and test your app"
          },
          "code": {
            "content": "def process_data(data):\n    \"\"\"Process input data\"\"\"\n    result = [x * 2 for x in data if x > 0]\n    return sum(result)\n\n# Test\nprint(process_data([1, -2, 3]))",
            "language": "python"
          },
          "hint": {
            "text": "Test your app with various text types (articles, emails, documents) to ensure the summarization works well across different content types.",
            "image": {
              "src": "testing-examples.jpg",
              "alt": "Different text types for testing",
              "caption": "Test with various content types to ensure robust summarization"
            },
            "code": {
              "content": "// Test with different text types\nconst testTexts = {\n  article: 'Long article text...',\n  email: 'Email content...',\n  document: 'Document text...'\n};\n\n// Test each type\nObject.entries(testTexts).forEach(([type, text]) => {\n  console.log(`Testing ${type}:`, await summarizeText(text));\n});",
              "language": "javascript"
            }
          }
        }
      ],
      
      "hero_image": {
        "src": "nlp-hero.jpg",
        "alt": "AI-powered text summarization in action", 
        "caption": "Transform long documents into concise, meaningful summaries using Google's Gemini AI"
      },
      
      "concepts": [
        {
          "title": "Natural Language Processing",
          "summary": "AI techniques for understanding and processing human language",
          "image": {
            "src": "nlp-concept.jpg",
            "alt": "NLP processing pipeline illustration"
          },
          "learn_more_context": "nlp_fundamentals"
        },
        {
          "title": "API Integration",
          "summary": "Connecting external AI services to your applications", 
          "image": {
            "src": "api-integration.jpg",
            "alt": "API connection diagram"
          },
          "learn_more_context": "api_integration"
        },
        {
          "title": "Prompt Engineering",
          "summary": "Crafting effective instructions for AI models",
          "image": {
            "src": "prompt-engineering.jpg",
            "alt": "Prompt optimization examples"
          },
          "learn_more_context": "prompt_engineering"
        }
      ]
    },
    
    "quiz": {
      "title": "Knowledge Check",
      "description": "Test your understanding with these comprehensive questions",
      "questions": [
        {
          "id": "q3",
          "type": "checkbox",
          "question": "Which of the following are important considerations when implementing AI text summarization in a web application? (Select all that apply)",
          "options": [
            "API rate limiting and cost management",
            "Error handling and fallback mechanisms", 
            "User input validation and sanitization",
            "Response caching for performance",
            "Security of API keys",
            "Real-time processing requirements",
            "Mobile responsiveness",
            "Accessibility compliance"
          ],
          "correct_answers": [0, 1, 2, 3, 4],
          "explanation": "All of these are crucial considerations for production AI applications. Rate limiting prevents cost overruns, error handling ensures reliability, input validation prevents security issues, caching improves performance, and API key security is essential for protecting your application.",
          "explanation_image": {
            "src": "prompt-engineering.jpg",
            "alt": "AI implementation best practices"
          }
        },
        {
          "id": "q1",
          "question": "What is the primary advantage of using Google's Gemini API for text summarization compared to traditional rule-based approaches?",
          "options": [
            "It's completely free with unlimited usage",
            "It can understand context and meaning for more accurate summaries", 
            "It works only with English text",
            "It requires no API key setup"
          ],
          "correct_answer": 1,
          "explanation": "AI-based APIs like Gemini can understand context, sentiment, and meaning in text, providing more accurate and nuanced summaries compared to simple rule-based approaches.",
          "explanation_image": {
            "src": "nlp-vs-traditional.jpg",
            "alt": "Comparison of AI vs traditional text processing"
          }
        },
        {
          "id": "q2", 
          "question": "Which of the following is the most important consideration when integrating an AI API into a web application?",
          "options": [
            "The API response speed",
            "Proper error handling and fallback mechanisms",
            "The number of API calls per minute",
            "The API documentation quality"
          ],
          "correct_answer": 1,
          "explanation": "Robust error handling and fallback mechanisms are crucial for production applications to ensure reliability and user experience when API calls fail.",
          "explanation_image": {
            "src": "api-integration.jpg",
            "alt": "API integration best practices"
          }
        }
      ],
      "settings": {
        "allow_retry": true,
        "show_progress": true,
        "randomize_questions": false,
        "passing_score": 2
      }
    },
    
    "chat_contexts": {
      "task_help": "Guide the learner through building the text summarization app step-by-step, from API setup to deployment",
      "nlp_fundamentals": "Explain core NLP concepts, tokenization, and how AI models process human language",
      "api_integration": "Detail how to securely integrate external APIs, handle authentication, and manage responses",
      "prompt_engineering": "Teach effective prompt design for summarization tasks and optimization techniques", 
      "quiz_failed": "Provide detailed explanation of AI-based vs traditional text processing approaches with examples",
      "hints_exhausted": "Offer advanced troubleshooting for API integration, Cursor IDE usage, and deployment issues"
    }
  }  